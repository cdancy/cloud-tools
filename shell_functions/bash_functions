DOCKER_REPO="cdancy/cloud-tools"
DOCKER_TAG="0.0.2"
DOCKER_VOLUMES="-v ~/.okta-aws:/root/.okta-aws -v ~/.awssaml.properties:/root/.awssaml.properties -v ~/.aws:/root/.aws -v ~/.kube:/root/.kube"
DOCKER_OPTIONS="--sig-proxy=true -i $DOCKER_VOLUMES --rm $DOCKER_REPO:$DOCKER_TAG"

# function to invoke aws
function a() { __execute_command aws "$@" $(printenv DOCKER_AWS_ARGS) ; }

# function to invoke aws-saml
function as() { __execute_command aws-saml "$@" $(printenv DOCKER_AWS_SAML_ARGS) ; }

# function to invoke docker
function d() { __execute_command docker "$@" $(printenv DOCKER_DOCKER_ARGS) ; }

# function to invoke helm
function h() { __execute_command helm "$@" $(printenv DOCKER_HELM_ARGS) ; }

# function to invoke kubectl
function kc() { __execute_command kubectl "$@" $(printenv DOCKER_KUBECTL_ARGS) ; }

# function to invoke octa-awscli
function oac() { __execute_command okta-awscli "$@" $(printenv DOCKER_OCTA_AWSCLI_ARGS) ; }

# function to invoke python3
function p() { __execute_command python3 "$@" $(printenv DOCKER_PYTHON_ARGS) ; }

function __execute_command() {
  # global user docker env-vars to pass along
  # and should be of the format: `-e HELLO=WORLD -e ONE=TWO`
  docker_env_vars=`printenv DOCKER_ENV_VARS`

  # special check for DOCKER_HOST env-var as it's
  # a standard at this point to expect its use if present
  docker_host_env=`printenv DOCKER_HOST`
  if [ ! -z "$docker_host_env" ]; then docker_env_vars="$docker_env_vars -e DOCKER_HOST=$docker_host_env"; fi

  eval docker run $docker_env_vars $DOCKER_OPTIONS "$@" ;
}
